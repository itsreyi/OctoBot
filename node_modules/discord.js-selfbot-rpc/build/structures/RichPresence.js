const { RichPresenceType, StatusType } = require('../util/Constants.js');

const error = (...args) => new Error(...args);
const rangeError = (...args) => new RangeError(...args);
const typeError = (...args) => new TypeError(...args);

class RichPresence {
	constructor() {
		this.data = {};
	}
	setApplicationId(string) {
		if(!validateString(string)) throw typeError('APPLICATION_ID', 'Type is not valid string!');
		this.data.application_id = string;
		return this;
	}
	setAssetsLargeImage(string) {
		if(!validateString(string)) throw typeError('ASSETS_LARGE_IMAGE', 'Type is not valid string!');
		if(!this.data.assets) this.data.assets = {};
		this.data.assets.large_image = string;
		return this;
	}
	setAssetsLargeText(string) {
		if(!validateString(string)) throw typeError('ASSETS_LARGE_TEXT', 'Type is not valid string!');
		if(!this.data.assets) this.data.assets = {};
		this.data.assets.large_text = string;
		return this;
	}
	setAssetsSmallImage(string) {
		if(!validateString(string)) throw typeError('ASSETS_SMALL_IMAGE', 'Type is not valid string!');
		if(!this.data.assets) this.data.assets = {};
		this.data.assets.small_image = string;
		return this;
	}
	setAssetsSmallText(string) {
		if(!validateString(string)) throw typeError('ASSETS_SMALL_TEXT', 'Type is not valid string!');
		if(!this.data.assets) this.data.assets = {};
		this.data.assets.small_text = string;
		return this;
	}
	setDetails(string) {
		if(!validateString(string)) throw typeError('DETAILS', 'Type is not valid string!');
		this.data.details = string;
		return this;
	}
	setName(string) {
		if(!validateString(string)) throw typeError('NAME', 'Type is not valid string!');
		this.data.name = string;
		return this;
	}
	setState(string) {
		if(!validateString(string)) throw typeError('STATE', 'Type is not valid string!');
		this.data.state = string;
		return this;
	}
	setStatus(string) {
		if(!StatusType.includes(string)) throw rangeError('SET_STATUS must be one of (online, idle, dnd or invisible)');
		this.data.status = string;
		return this;
	}
	setTimestamp(date) {
		if(date && typeof date !== 'number') return this;
		this.data.timestamps = { start: date || Date.now() };
		return this;
	}
	setType(string) {
		string = String(string);
		if(!Object.keys(RichPresenceType).includes(string)) throw rangeError('SET_TYPE must be one of (PLAYING, STREAMING, LISTENING, WATCHING)');
		this.data.type = RichPresenceType[string.toUpperCase()] || RichPresenceType.PLAYING;
		return this;
	}
	setURL(string) {
		if(!validateString(string)) throw typeError('SET_URL', 'Type is not valid string!');
		if(!string.startsWith('http') || !string.startsWith('https')) throw error('URL is not valid link!');
		this.data.url = string;
		return this;
	}
	toJSON() {
		const json = {
			type: this.data.type || RichPresenceType.PLAYING,
		};
		if(this.data.application_id) json.application_id = this.data.application_id;
		if(this.data.name) json.name = this.data.name;
		if(this.data.details) json.details = this.data.details;
		if(this.data.state) json.state = this.data.state;
		if(this.data.assets) json.assets = this.data.assets;
		if(this.data.timestamps) json.timestamps = this.data.timestamps;
		return json;
	}
	toData() {
		const data = {};
		data.activities = [this.toJSON()];
		if(this.data.status) data.status = this.data.status;
		return data;
	}
};

function validateString(value) {
	if(typeof value !== 'string') return false;
	else return true;
};

module.exports = RichPresence;
