const https = require('https');

const error = (...args) => new Error(...args);

class Util {
	static async fetchAssets(applicationId) {
		if(!applicationId) throw error('Application_ID must be provided!');
		return new Promise((resolve, reject) => {
			const options = {
				hostname: 'discord.com',
				port: 443,
				path: `/api/oauth2/applications/${applicationId}/assets`,
				method: 'GET',
			};
			const result = {};
			result.data = '';
			const req = https.request(options, res => {
				result.statusCode = res.statusCode;
				res.setEncoding('utf8');
				res.on('data', data => {
					result.data += data;
				});
				res.on('end', () => {
					result.data = JSON.parse(result.data);
					resolve(result);
				});
			});
			req.on('error', error => {
				reject(error);
			});
			req.end();
		});
	}
	static async getAssets(applicationId, assetsName) {
		if(!applicationId) throw error('Application_ID must be provided!');
		if(!assetsName) throw error('Assets_Target_Name must be provided!');
		try{
			const res = await this.fetchAssets(applicationId);
			return res.data.filter(assets => assets.name === assetsName)[0];
		}
		catch(error){
			throw error;
		}
	}
	static parseEmoji(text) {
		if (text.includes('%')) text = decodeURIComponent(text);
		if (!text.includes(':')) return { animated: false, name: text, id: undefined };
		const match = text.match(/<?(?:(a):)?(\w{2,32}):(\d{17,19})?>?/);
		return match && { animated: Boolean(match[1]), name: match[2], id: match[3] };
	}
};

module.exports = Util;
